This is a problem in computational geometry, and shows the use of recursion.

You are given 2n points in the plane, with integer coordinates, such that
no 3 of the points are collinear. The points are colored red or blue so that
there are exactly n red and n blue points. The problem is to find a pairing
of the red points with the blue points such that the n line-segments joining
the paired points are non-intersecting. Such a pairing is always possible,
and you have to write a program to find any one such pairing.

Example: If the red points are (0,0) and (0,1) and the blue points are
(1.0) and (1,1), the only such pairing is (0,0)-(1,0) and (0,1)-(1,1).

If the red points are (0,0) (2,0) and (-1,2), while the blue points are
(0,1), (1,1) and (3,2), then one possible pairing is (0,0)-(0,1)
(-1,2)-(1,1) and (2,0)-(3,2). Another possible pairing is (0,0)-(0,1),
(-1,2)-(3,2) and (2,0)-(1,1).

A simple way of finding such a pairing is to start with an arbitrary initial
pairing. If the line-segments joining a  pair (a,b) and (c,d) intersect,
simply replace the pairs by the pairs (a,d) and (c,b). Repeat as long
as there are intersecting segments. This process is guaranteed to terminate
after a finite number of steps. Why? However, this method can be
very inefficient.

A recursive way to solve the problem is as follows. Try to find a straight
line such that the number of red points to the left of the line is
equal to number of blue points to its left. (This implies that the numbers
on or to the right of the line are also equal.) Ensure that both sides
have non-zero number of points and recursively solve the problem for points to 
the left and separately for the points to the right.

To find such a line, fix one of the points and consider the lines that pass
through this point and each of the other 2n-1 points. One of these must
give the required line. Why?
You can do this faster if you sort the other points according to the
slopes of the lines, but for this lab you need not do this. Also, the method 
will work faster if you choose a line that divides the points into 2 sets of 
size as close to half the original size as possible.

Input Format.
The first line will specify 2n, the total number of points.
The next n lines will specify the x- and y-coordinates of the red points.
Each line will contain 2 integers separated by a space. The next n lines
will specify the coordinates of the blue points, one per line.
You can assume the coordinates will be between -10000 to 10000.
The total number of points will be at most 5000.

Output
Output n lines, each containing two numbers i and j separated by a space, 
specifying that ith red point is paired with jth blue point.

Sample input 1
4
0 0
0 1
1 0
1 1

Sample Output 1
0 0
1 1

Sample Input 2
6
0 0
2 0
-1 2
0 1
1 1
3 2
Sample output 2
0 0
1 2
2 1


Note: First implement the simple method. This will work for at least
half the cases. Try the recursive method after that.
Submit your program as RollNo_2.cpp
