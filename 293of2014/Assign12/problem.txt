				Series-parallel graphs


Consider a large resistance network consisting of n terminals and m
resistances connecting pairs of terminals. Given two terminals s and t,
we want to find the effective resistance between s and t. In general,
the only way is to solve equations given by Kirchhoff's Laws. However,
this can be time-consuming (O(n^3)).

For certain kinds of networks, simpler methods are possible. One such
class is that of series-parallel networks or graphs. If a terminal u
different from s,t is connected by exactly two resistances to terminals
v and w, we can delete it and add a new resistance between v and w, with
value = sum of resistance vu + resistance uw.
Similarly, if a pair of terminals is connected by more than one resistance,
we can replace it by a single resistance. If a terminal u other than
s,t is connected to at most one other terminal, it can be deleted.

The graph is said to be series-parallel with respect to terminals s, t
if by using these operations, we can delete all other terminals.
The resistance between s and t in the final graph is effective resistance.

In this problem, you have to determine the effective resistance between
s and t, using these reductions, if it is possible. If possible,
output the value of the effective resistance, else output IMPOSSIBLE.
Note that if there is no connection between s and t, the output
should be INFINITY if all other nodes can be deleted, else IMPOSSIBLE.

Input Format
The first line gives n , m, s and t.
The next m lines gives the m resistances. Each resistance is specified
by the terminals it joins and its value, which will be a double.


Output
Output either a double value, IMPOSSIBLE or INFINITY.

Sample Input 1          Sample Output 1
4 5 0 1			IMPOSSIBLE
0 2 1
0 3 1
2 3 1
1 2 1
1 3 1


Sample Input 2		Sample Output 2
6 7 0 4			1.14286
0 1 1
0 5 1
1 2 1
1 3 1
2 3 1
3 4 1
4 5 1


Some large test cases are at www.cse.iitb.ac.in/~aad/cs293/Assign12

Note that while it is easy to get an O(n^2) algorithm, n may be
about 10^6 or more, so this will not work for all cases.
There is an O(n+m) time algorithm. You can either try to code
it or improve the O(n^2) algorithm using suitable data structures.

Submit as RollNo_12.cpp
