			Shortest Paths in Geometric Graphs

This assignment looks at improvements to Dijkstra's algorithm for special
kinds of graphs. Here we look at what are called geometric graphs. The
nodes of a geometric graph are points in the plane (or higher dimensions).
The successor relation is defined by some geometric property of the points.
For example, point b is considered to be a successor of point a, if the
euclidean distance between a and b is at most a specified number D. The cost
of the edge (a,b) is the actual distance between a and b. Given two points
s and t, we want to find the cost of the shortest path from s to t in such
a graph.


In this case, Dijkstra's algorithm can be inefficient even if it is implemented
using a heap. The number of edges in the graph can be O(n^2) and all edges
may get examined. For example, if any two points are at distance <= D from
each other, but t is the farthest point from s, Dijkstra's algorithm would
examine all points and their successors, but the shortest path is just the
direct edge from s to t.

Here, a heuristic search can improve things significantly. The heuristic used
is the euclidean distance from a point to the destination t. The priority
of a node x in the queue is the sum of the current shortest path to x, l(x)
+ h(x). If two nodes have equal priority, then the node with larger l value
will be considered first. The node with least priority will be deleted from
the queue and its successors examined to see if a shorter path is found,
as in Dijkstra's algorithm. This reduces the number of nodes examined.
For the previous example, we will directly delete node t first from the
queue and stop. 


Implementation

You will need to implement a heap to maintain the nodes in a priority
queue. This can  be done by an array implementation of a complete binary
tree. Since priorities need to be updated, you need to keep track of
the position of each node in the heap. When examining successors of a
node, it may help to have the points in sorted order, so that points
at distance <= D from a given point can be identified quickly.

Input
The first line of input specifies n, the number of points; D, the maximum
distance between adjacent points (a double value); the starting and ending 
points s and t.  The next n lines give the coordinates of the n points. Each
coordinate is a double value.

The number of points may be up to 10^6.

Output
Output the cost of the shortest path from s to t. Output INFINITY if there
is no path from s to t.

Sample Input
4 2 0 3
0 0
1 1
2 1
3 0

Sample output
3.82843
